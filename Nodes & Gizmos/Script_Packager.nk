version 14.0 v4
push $cut_paste_input
NoOp {
 name SCRIPT_PACKAGER
 selected true
 xpos 1662
 ypos 1180
 hide_input true
 addUserKnob {20 User l PACKAGER}
 addUserKnob {2 pkg_folder l "PACKAGE FOLDER"}
 pkg_folder Z:/projects/onslaught/deliveries/pkg
 addUserKnob {22 py_button l "PACKAGE THIS SCRIPT" T "import nuke\nimport os\nimport shutil\nimport re\n\ndef package_script():\n    node = nuke.thisNode()\n    base_pkg_folder = node\['pkg_folder'].value().replace('\\\\', '/')\n\n    current_script = nuke.root().name()\n    if current_script == 'Root':\n        nuke.message(\"Please save your script before running packaging.\")\n        return\n\n    script_name = os.path.basename(current_script)\n    script_name_no_ext = os.path.splitext(script_name)\[0]\n\n    # New package folder inside base folder, named after script (without extension)\n    pkg_folder = os.path.join(base_pkg_folder, script_name_no_ext)\n    if not os.path.isdir(pkg_folder):\n        os.makedirs(pkg_folder)\n\n    asset_folder = os.path.join(pkg_folder, 'assets')\n    if not os.path.isdir(asset_folder):\n        os.makedirs(asset_folder)\n\n    # Set project_directory to new package folder BEFORE changing paths\n    nuke.root()\['project_directory'].setValue('\[python \{nuke.script_directory()\}]')\n\n    # Only enabled Read nodes\n    read_nodes = \[r for r in nuke.allNodes('Read') if r\['file'].value() and not r\['disable'].value()]\n    total_reads = len(read_nodes)\n\n    master_progress = nuke.ProgressTask(\"Packaging project\")\n\n    for idx, read_node in enumerate(read_nodes):\n        if master_progress.isCancelled():\n            nuke.message(\"Packaging cancelled.\")\n            return\n\n        file_path = read_node\['file'].evaluate()\n        file_base = os.path.basename(file_path)\n        file_dir = os.path.dirname(file_path)\n\n        master_progress.setMessage(f\"Processing \{file_base\}\")\n        master_progress.setProgress(int((idx / float(total_reads)) * 100))\n\n        # Detect sequence by 4-digit frame number before extension\n        seq_match = re.match(r\"^(.*?)(\[._-])(\\d\{4\})(\\.\[^.]*)\$\", file_base)\n        if seq_match:\n            prefix = seq_match.group(1)\n            sep = seq_match.group(2)\n            ext = seq_match.group(4)\n\n            pattern = re.compile(r\"^\" + re.escape(prefix) + re.escape(sep) + r\"(\\d\{4\})\" + re.escape(ext) + r\"\$\")\n\n            try:\n                all_files = os.listdir(file_dir)\n            except Exception as e:\n                nuke.message(f\"Cannot list directory \{file_dir\}: \{e\}\")\n                return\n\n            sequence_files = \[os.path.join(file_dir, f) for f in all_files if pattern.match(f)]\n            sequence_files.sort()\n\n            folder_name = prefix\n            pattern_name = f\"\{prefix\}\{sep\}%04d\{ext\}\"\n\n        else:\n            sequence_files = \[file_path]\n            folder_name = os.path.splitext(file_base)\[0]\n            pattern_name = file_base\n\n        this_asset_folder = os.path.join(asset_folder, folder_name)\n        if not os.path.exists(this_asset_folder):\n            os.makedirs(this_asset_folder)\n\n        sub_progress = nuke.ProgressTask(f\"Copying \{file_base\}\")\n        for j, src in enumerate(sequence_files):\n            if sub_progress.isCancelled():\n                return\n\n            dst = os.path.join(this_asset_folder, os.path.basename(src))\n            if not os.path.exists(dst):\n                shutil.copy2(src, dst)\n\n            sub_progress.setMessage(f\"Copying \{os.path.basename(src)\}\")\n            sub_progress.setProgress(int((j / float(len(sequence_files))) * 100))\n\n        rel_path = os.path.join(\"assets\", folder_name, pattern_name).replace('\\\\', '/')\n        read_node\['file'].setValue(rel_path)\n\n    master_progress.setProgress(100)\n\n    # Save the script at the end after all changes\n    saved_script_path = os.path.join(pkg_folder, script_name)\n    nuke.scriptSaveAs(saved_script_path)\n\n    nuke.message(\"Packaging complete.\")\n\npackage_script()\n" +STARTLINE}
}
