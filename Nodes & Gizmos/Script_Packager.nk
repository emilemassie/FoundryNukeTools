version 14.0 v4
push $cut_paste_input
NoOp {
 name COPY_FILES
 selected true
 xpos 1060
 ypos 951
 addUserKnob {20 User}
 addUserKnob {2 destination l "DESTINATION :"}
 destination Z:/projects/onslaught/deliveries/EXRs
 addUserKnob {22 python_button l "COPY FILES" T "import nuke\nimport os\nimport shutil\n\n# Destination root\ndestination = nuke.thisNode()\['destination'].value()\nos.makedirs(destination, exist_ok = True)\n\n# Collect Read nodes\n#read_nodes = \[r for r in nuke.allNodes('Read')]\nread_nodes = \[r for r in nuke.allNodes('Read') if r\['disable'].value() == 0]\n\ntotal_reads = len(read_nodes)\n\nif total_reads == 0:\n    nuke.message(\"No Read nodes found.\")\n    raise SystemExit\n\n# Outer progress bar\nouter_progress = nuke.ProgressTask(\"Copying from Read Nodes\")\ncancelled = False\n\ntry:\n    for read_index, read in enumerate(read_nodes, start=1):\n        if outer_progress.isCancelled():\n            cancelled = True\n            break\n\n        folder = os.path.dirname(read\['file'].value())\n\n        # Resolve shot and sequence\n        try:\n            shot_folder = os.path.dirname(folder)\n            comp_folder = os.path.dirname(shot_folder)\n            media_folder = os.path.dirname(comp_folder)\n            shot = os.path.basename(os.path.dirname(media_folder))\n            sequence = os.path.basename(os.path.dirname(os.path.dirname(media_folder)))\n        except Exception:\n            continue  # Skip folder if malformed\n\n        outer_progress.setMessage(f\"\{read_index\}/\{total_reads\} - \{shot\}\")\n        outer_progress.setProgress(int((read_index / float(total_reads)) * 100))\n\n        # Destination folder\n        target_folder = os.path.join(destination, sequence, shot)\n        os.makedirs(target_folder, exist_ok=True)\n\n        # List files\n        files = \[f for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f))]\n        total_files = len(files)\n        if total_files == 0:\n            continue\n\n        # Inner progress bar\n        inner_progress = nuke.ProgressTask(f\"\{sequence\}/\{shot\}: Copying Files\")\n\n        for i, file in enumerate(files, start=1):\n            if inner_progress.isCancelled() or outer_progress.isCancelled():\n                cancelled = True\n                break\n\n            src_file = os.path.join(folder, file)\n            dst_file = os.path.join(target_folder, file)\n\n            inner_progress.setProgress(int((i / float(total_files)) * 100))\n            inner_progress.setMessage(f\"\{i\}/\{total_files\} - \{file\}\")\n\n            try:\n                shutil.copy2(src_file, dst_file)\n            except Exception:\n                cancelled = True\n                break\n\n        # Clean up inner progress\n        inner_progress.setProgress(100)\n        del inner_progress\n\n        if cancelled:\n            break\n\nfinally:\n    # Always clean up outer progress\n    outer_progress.setProgress(100)\n    del outer_progress\n\n# Final message only if not cancelled\nif cancelled:\n    print(\"⚠️ Copying was cancelled.\")\nelse:\n    print(\"✅ All files copied successfully.\")\n" +STARTLINE}
}
